---
layout:     post
title:      "Android有效加载大图、多图解决方案，有效避免OOM(2)"
subtitle:   "Android加载图片"
date:       2016-04-23
author:     "SaladJack"
header-img: "img/post-avoid-omm-2.jpg"
tags:
    - Android
---

## 使用图片缓存技术
在你应用程序的UI界面加载一张图片是一件很简单的事情，但是当你需要在界面上加载一大堆图片的时候，情况就变得复杂起来。在很多情况下，（比如使用ListView, GridView 或者 ViewPager 这样的组件），屏幕上显示的图片可以通过滑动屏幕等事件不断地增加，最终导致OOM。


Android中自带的内存缓存技术对那些大量占用内存的图片提供了快速访问的方法，它可以让组件快速重新加载和处理图片。其中最核心的类是LruCache，这个类非常适合用来缓存图片，它的主要算法原理是把最近使用的对象用强引用存储在[强引用]("http://blog.csdn.net/mazhimazh/article/details/19752475")存储在LinkedHashMap中，并且把最近最少使用的对象在缓存值达到预设值之前从内存中移除。

下面是一个使用LruCache来缓存图片的例子


```java
private LruCache<String, Bitmap> mMemoryCache;  
  
@Override  
protected void onCreate(Bundle savedInstanceState) {  
    // 获取到可用内存的最大值，使用内存超出这个值会引起OutOfMemory异常。  
    // LruCache通过构造函数传入缓存值，以KB为单位。  
    int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);  
    // 使用最大可用内存值的1/8作为缓存的大小。  
    int cacheSize = maxMemory / 8;  
    mMemoryCache = new LruCache<String, Bitmap>(cacheSize) {  //LruCache的泛型为键-值对
        @Override  
        protected int sizeOf(String key, Bitmap bitmap) {  
            // 重写此方法来衡量每张图片的大小，默认返回图片数量。  
            return bitmap.getByteCount() / 1024;  
        }  
    };  
}  
//MemoryCache中使用队列储存键-值对信息
//将BitMap对象加入MemoryCache(即LruCache)中的方法
public void addBitmapToMemoryCache(String key, Bitmap bitmap) {  
    if (getBitmapFromMemCache(key) == null) {  
        mMemoryCache.put(key, bitmap);  
    }  
}  
//从MemoryCache中取出Bitmap  
public Bitmap getBitmapFromMemCache(String key) {  
    return mMemoryCache.get(key); // key不存在时则返回null，否则返回该值并将该键-值对放于对首
}  
```

在这个例子当中，使用了系统分配给应用程序的八分之一内存来作为缓存大小。在中高配置的手机当中，这大概会有4兆(32/8)的缓存空间。一个全屏幕的 GridView 使用4张 800x480分辨率的图片来填充，则大概会占用1.5兆的空间(800*480*4)。因此，这个缓存大小可以存储2.5页的图片。

当向 ImageView 中加载一张图片时,首先会在 LruCache 的缓存中进行检查。如果找到了相应的键值，则会立刻更新ImageView ，否则开启一个后台线程（这里使用AsyncTask实现）来加载这张图片。下面的代码可以说是本文图片缓存的大概框架

```java
public void loadBitmap(int resId, ImageView imageView) {  
    final String imageKey = String.valueOf(resId);  
//先从缓存取出对首元素，若元素非空，则直接对imageView设置；否则要先加载图片，在从缓存中读取
    final Bitmap bitmap = getBitmapFromMemCache(imageKey);  
    if (bitmap != null) {  
        imageView.setImageBitmap(bitmap);  
    } else {  
        imageView.setImageResource(R.drawable.image_placeholder); //加载前的默认图片 
        BitmapWorkerTask task = new BitmapWorkerTask(imageView);//异步加载实现在后台加载图片，从而避免OOM  
        task.execute(resId); //传入AsyncTask的第一个参数，执行异步加载！ 
    }  
}  
```

下面我们再来看看BitmapWorkerTask的实现

```java
class BitmapWorkerTask extends AsyncTask<Integer,Void,Bitmap>{
        private ImageView mimageView;
        
        @Override
        protected Bitmap doInBackground(Integer... params) {
            final Bitmap bitmap = decodeSampledBitmapFromresource(getResources(),params[0],100,100);//压缩
            addBitmapToMemoryCache(String.valueOf((params[0])),bitmap);//加入缓存
            return bitmap;//返回值会传入onPostExecte方法中
        }

        //doInBackground方法调用结束后调用onPostExecute
        @Override
        protected void onPostExecute(Bitmap bitmap) {
            mimageView.setImageBitmap(bitmap);
        }

        BitmapWorkerTask(ImageView imageView){
            mimageView = imageView;
        }
    }
```

