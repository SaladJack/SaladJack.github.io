---
layout:     post
title:      "腾讯实习总结"
tags:
    - 实习
---
从4月14日入职到现在8月22日，我来腾讯实习转眼已有4个多月的时间。

在这段时间里，要感谢很多很多人，在工作室里，每一个人都是我的导师：
1、首先感谢王老板和薛总，在今年内推招聘的过程中，即使知道我性格比较内向，也能给我这个机会参与到蜡笔这个大家庭来，在这里让我收获了友谊，学习了新的技术，体验了系统的项目管理流程，更重要的是意识到了沟通的重要性。
2、感谢我的导师jazzy，正是jazzy一开始耐心的教我装环境、教我用unity、教我用NGUI、教我调试，才能让我在入门手游开发的学习过程中更加的高效；
3、感谢yuke，在我工作遇到低谷的时候，yuke总能鼓励我，像个大哥哥一样的照顾我，在我请教后台知识的时候也不会嫌弃我，很yuke沟通、联调一直很舒服，yuke总能把问题想的很周全，这种能力，一直是我梦寐以求的；
4、感谢stephe，在jazzy转岗之后的这段时间里，同时也是我压力最大的时期，很感谢stephe能像导师一样无私的指导我，很珍惜跟stephe一起探讨问题的机会，因为在这个过程中每次都会收获惊喜和满满的成就感；
5、感谢徐老板，当我评估工作不合理的时候，徐老板给能迅速合理的指点我评估要注意的地方，耐心的教我使用tapd，耐心教我如何去沟通、需求优先级冲突应该怎么调整等等一系列项目管理的问题；
6、感谢小雯和慧玲，在我每次对需求不清楚的时候你们都会耐心、详细的跟我解释，在我对需求发出挑战的时候也会耐心的听我的建议；


对项目管理的看法：
1、深刻意识到了沟通的重要性，有效的沟通能大大减少管理成本，且能做到有效的风险评估。在遇到难题时，及时的求助老员工，能在开发过程中避免不少坑，如果求助不能解决问题，可以先向leader告知情况，让管理层上能及时评估风险，之后自己可以冷静下来思考，如果思考时间到15~30min仍没有什么头绪的话，及时通知PM调整工作的优先级。
2、策划的需求不一定是准确的，要敢于挑战需求，只有经过一起体验和探讨，并经过不断的打磨才能最终产出一份高品质的游戏。遇到技术上难以实现的需求，一定要及时沟通，甚至可以退一步，用比较简单的方式实现，看看策划能不能接受这种简单效果也不失为一种解决方案。
3、在评估工作量的时候一定要合理评估时间，越详细就证明自己对需求理解的越透彻，同时也能让管理层知会你所需要的工作时间，方便在当前版本内规划工作。
4、在需要重构代码或者造轮子之前，也需要跟管理层沟通。因为在项目紧的情况下，重构代码及造轮子的风险都很大，即使有经验的团队，也未必能准确把控这种风险。
5、需求评审要仔细听，因为这个时候一般人都比较齐，遇到有问题的需求可以及时的反馈及讨论解决。
6、开发们应该在需求评估上考虑项目的断线重连、弱网等边界条件处理，否则这将会导致项目后期的维护难度增大。
7、tapd是个好东西，有效利用能减少不必要的沟通成本和管理成本。

自己的收获：
1、入门手游开发，从事新的领域，开阔了技术视野，更重要的是锻炼了如何快速适应和学习新的技术。
2、能认识各位优秀的同事是我一生的荣幸。
3、在导师转岗之后，在人手不足的情况下，自己能主动承担责任，即使项目紧，也保证每天挤出时间快速学习，让自己能跟上大家的步伐，不拖大家后腿。
4、项目后期负责扒竞品数据的后台同学遇到了困难，完全没想到自己以前偶然学的Apk逆向知识居然能帮助到他们解决困扰了几个星期的游戏配置的大难题，尽管逆向途中遇到了很多坑，比如竞品Apk的数据DB是以一种加密后的BLOB存储的，尽管通过逆向工具能定位到解析函数，但解析函数混淆的相当厉害，几经周折也没有好的思绪，之后想到调试看看内存的数据长什么样，看到某个JavaBean类的tostring方法有存储棋盘信息，于是很自然的想到在smali代码注入日志，但是竞品有防二次打包的机制，之后尝试换种思路，发现有个数组大小刚好跟BLOB的长度和棋盘格子数相等，经一步步的分析规律，发现它的BLOB加密方式居然只是相邻的基数位和偶数位对换一下，一下子豁然开朗。
5、遇到难以定位的问题，学会如何耐心的调试或者看日志定位问题。即使遇到困难的问题，也没有了以前的慌张，倒是多了几分镇定，耐心的思考往往才是定位问题的关键。

自己的不足：
1、与管理层的沟通不足，在工作量评估上还不够细致，导致有时候在功能体验的时候会出现需求漏做、出bug的情况。
2、遇到难题时询问老员工也没有得到好的解决方案时，缺少主动的跟管理层沟通，告知管理层解决问题的风险以及需要花费的时间。
3、自己有时候会有点独来独往，遇到问题时喜欢自己扛着；有时候也会擅作主张，比如没经过管理层的同意，重构了一些重要模块的代码；这都是我以后未来在职场中一定要正视并且要改正的缺点，这种性格不太利于团队沟通，对于上层也存在管理的风险。
4、当需求任务排得很满的时候，没有实时的跟PM和策划沟通调整优先级；同时在优先级频繁更替的时候，也容易出现需求点的疏忽。
5、在优化闯关画线的需求上，过于死板，不会退一步思考，即先给出策划可以接受同时程序实现简单的方案，在沟通中，没有很好的变通。
6、自己在代码方面缺少所有边界条件的周全考虑，项目测试期间产生了很多低级bug。